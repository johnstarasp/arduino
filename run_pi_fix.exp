#!/usr/bin/expect -f

set timeout 120
log_file -a pi_session.log

spawn ssh jstaras@192.168.1.48

expect {
    "yes/no" {
        send "yes\r"
        exp_continue
    }
    "password:" {
        send "Saskatouraw1!\r"
    }
}

expect "$ "
puts "\n=== Connected to Raspberry Pi ===\n"

# Find the arduino directory
send "find ~/ -type f -name 'firstTry.py' 2>/dev/null | head -1\r"
expect -re "(.*)\r\n.*$ "
set file_path $expect_out(1,string)
puts "Found firstTry.py at: $file_path"

# Extract directory from file path
send "dirname $file_path\r"
expect -re "(.*)\r\n.*$ "
set arduino_dir $expect_out(1,string)

# Change to that directory
send "cd $arduino_dir\r"
expect "$ "
send "pwd\r"
expect "$ "
send "ls -la\r"
expect "$ "

# Create the modem test script
send "cat > test_modem.py << 'EOFTEST'\r"
send "import serial\r"
send "import time\r"
send "import sys\r"
send "\r"
send "ports = \['/dev/serial0', '/dev/ttyS0', '/dev/ttyAMA0', '/dev/ttyUSB0', '/dev/ttyUSB1', '/dev/ttyACM0'\]\r"
send "bauds = \[9600, 115200, 19200, 38400\]\r"
send "\r"
send "print('Searching for GSM modem...')\r"
send "print('-' * 40)\r"
send "\r"
send "for port in ports:\r"
send "    for baud in bauds:\r"
send "        try:\r"
send "            print(f'Testing {port} @ {baud} baud...', end=' ')\r"
send "            ser = serial.Serial(port, baud, timeout=2)\r"
send "            time.sleep(1)\r"
send "            ser.write(b'AT\\r\\n')\r"
send "            time.sleep(0.5)\r"
send "            resp = ser.read(100).decode('utf-8', errors='ignore')\r"
send "            if 'OK' in resp or 'AT' in resp:\r"
send "                print('FOUND!')\r"
send "                print(f'\\nModem detected at {port} with {baud} baud')\r"
send "                print('Response:', resp.strip())\r"
send "                \r"
send "                # Get more info\r"
send "                ser.write(b'AT+CSQ\\r\\n')\r"
send "                time.sleep(0.5)\r"
send "                sig = ser.read(100).decode('utf-8', errors='ignore')\r"
send "                print('Signal quality:', sig.strip())\r"
send "                \r"
send "                ser.write(b'AT+CREG?\\r\\n')\r"
send "                time.sleep(0.5)\r"
send "                reg = ser.read(100).decode('utf-8', errors='ignore')\r"
send "                print('Network registration:', reg.strip())\r"
send "                \r"
send "                ser.close()\r"
send "                print('\\nUse these settings in firstTry.py:')\r"
send "                print(f'SERIAL_PORT = \"{port}\"')\r"
send "                print(f'BAUD_RATE = {baud}')\r"
send "                sys.exit(0)\r"
send "            else:\r"
send "                print('No response')\r"
send "            ser.close()\r"
send "        except Exception as e:\r"
send "            print(f'Error: {e}')\r"
send "\r"
send "print('\\nNo GSM modem found on any port!')\r"
send "print('Make sure the modem is connected and powered on.')\r"
send "EOFTEST\r"
expect "$ "

puts "\n=== Running modem test ===\n"
send "sudo python3 test_modem.py\r"
expect {
    "password for jstaras:" {
        send "Saskatouraw1!\r"
        exp_continue
    }
    "SERIAL_PORT" {
        puts "\nModem found! Checking output..."
        exp_continue
    }
    "No GSM modem found" {
        puts "\nNo modem detected. Checking USB devices..."
        send "lsusb\r"
        expect "$ "
        send "ls -la /dev/tty*\r"
        expect "$ "
    }
    timeout {
        puts "\nTimeout during modem test"
    }
    "$ " {
        puts "\nModem test completed"
    }
}

expect "$ "

# Now let's check the current firstTry.py settings
puts "\n=== Checking current firstTry.py settings ===\n"
send "grep -E 'SERIAL_PORT|BAUD_RATE|SMS_PHONE' firstTry.py | head -3\r"
expect "$ "

# Run the firstTry.py to see what errors we get
puts "\n=== Testing firstTry.py ===\n"
send "sudo timeout 20 python3 firstTry.py\r"
expect {
    "password for jstaras:" {
        send "Saskatouraw1!\r"
        exp_continue
    }
    "Modem connected" {
        puts "\nModem connection successful!"
        exp_continue
    }
    "Failed to connect" {
        puts "\nModem connection failed - need to fix settings"
        exp_continue
    }
    timeout {
        puts "\nScript timeout"
    }
    "$ " {
        puts "\nScript execution completed"
    }
}

expect "$ "

# Check the log file
puts "\n=== Checking log file ===\n"
send "tail -20 /tmp/bike_speedometer.log 2>/dev/null\r"
expect "$ "

interact